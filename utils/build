#!/bin/bash
set -euo pipefail

script=$(basename "$0")
srcdir=$(readlink -f "$(dirname "$0")")
readonly LOG_FILE="/tmp/$script.log"
_p() { l=$1; shift; echo "$l $script: $*" | tee -a "$LOG_FILE" >&2; }
pt() { _p "[TRACE]  " "$*";                                         }
pd() { _p "[DEBUG]  " "$*";                                         }
pi() { _p "[INFO]   " "$*";                                         }
pw() { _p "[WARNING]" "$*";                                         }
pe() { _p "[ERROR]  " "$*";                                         }
pf() { _p "[FATAL]  " "$*"; exit 1;                                 }

usage() {
    cat <<EOT
$script --help
$script --trace --verbose --force [sw]
EOT
    exit 0
}

cleanup() {
    declare -r res=$?
    ((verbose)) && pi "Cleaning up"
    exit $res
}

PATH="$srcdir:$PATH"
verbose=0
force=0
build=
j=16
b=__build__

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            shift
            ;;
        -t|--trace)
            set -x
            shift
            ;;
        -v|--verbose)
            verbose=1
            shift
            ;;
        -f|--force)
            force=1
            shift
            ;;
        -j|--jobs)
            j="$2"
            shift 2
            ;;
        -b|--build)
            b="$2"
            shift 2
            ;;
        *)
            build="$1"
            shift
            break
            ;;
    esac
done

if [ "$build" ]; then
    dir=$(ghq list -p | grep -w "$build$")
    if [ "$dir" ]; then
        cd "$dir" || exit 1
    fi
fi

pi build "${build:=$(basename "$(pwd)")}"

sw=$HOME/g/sw
mkdir -p "$sw/bin"
mkdir -p "$sw/man/man1"

configure() {
    [ -f ./configure ] || ./autogen.sh
    ./configure --prefix="$sw" "$@"
}

exit_unless_x() {
    if ! DISPLAY=:0 xset q > /dev/null 2>&1; then
        pi "not running under X, ignoring $build"
        exit
    fi
}

exit_if_vm() {
    if [ "$ISVM" ]; then
        pi "running as VM, ignoring $build"
        exit
    fi
}

install_pkg() {
    # sudo aptitude update
    sudo aptitude -y install "$@"
}

git_co_build() {
    branch="$1"
    git checkout master
    git branch -D "$b" || true
    git checkout -b "$b" "$branch"
    git clean -dxf
}

git_co_master() {
    git branch -f master origin/master
    git checkout master
}

case "$build" in
    urlview)
        [ "$(git rev-parse --short HEAD)" = "08767aa" ] && exit
        autoreconf -vfi
        configure
        make check install
        ;;
    htop)
        v=$(git tag | grep -v beta | tail -1)
        ((force)) || { \
            [ "$v" = "$(htop --version | head -1 | awk '{print $2}')" ] && exit;
        }
        git_co_build "$v"
        configure
        # TODO - sometimes parallel build seems to fail
        make -j "$j" check install
        git_co_master
        ;;
    libevent)
        exit_unless_x
        configure
        make install
        ;;
    neovim)
        v=$(git tag | tail -1)
        ((force)) || { \
            [ "NVIM $v" = "$(nvim -v | head -1)" ] && exit;
        }
        git_co_build "$v"
        if [ ! "$ISOSX" ]; then
            install_pkg \
                libtool libtool-bin autoconf automake cmake g++ pkg-config unzip
        fi
        git clean -dxf
        make -j "$j" CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX:PATH=$sw" \
             CMAKE_BUILD_TYPE=Release install
             # CMAKE_BUILD_TYPE=Release test install
        git_co_master
        ;;
    vim)
        if [ ! "$ISOSX" ]; then
            install_pkg \
                libncurses5-dev libgnome2-dev libgnomeui-dev \
                libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
                libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \
                python3-dev ruby-dev lua5.1 lua5.1-dev libperl-dev
        fi
        git clean -dxf
        configure                      \
            --with-features=huge       \
            --enable-multibyte         \
            --enable-rubyinterp=yes    \
            --enable-pythoninterp=yes  \
            --enable-python3interp=yes \
            --enable-perlinterp=yes    \
            --enable-luainterp=yes     \
            --enable-gui=gtk2          \
            --enable-cscope
        make VIMRUNTIMEDIR="$sw/share/vim/vim80" test install
            # --with-python-config-dir=/usr/lib/python2.7/config \
            # --with-python3-config-dir=/usr/lib/python3.5/config \
        ;;
    st)
        exit_unless_x
        install_pkg fontconfig libfontconfig1-dev \
            libfreetype6 libfreetype6-dev libxft-dev
        make clean install
        make_tmux_terminfo
        ;;
    sxhkd|bspwm)
        exit_unless_x
        install_pkg                                                  \
            libxcb-util0-dev libxcb-keysyms1-dev                     \
            libxcb-xinerama0-dev libxcb-randr0-dev libxcb-icccm4-dev \
            xcb libxcb-util0-dev libxcb-ewmh-dev                     \
            libxcb-randr0-dev libxcb-icccm4-dev libxcb-keysyms1-dev  \
            libxcb-xinerama0-dev libxcb-ewmh2                        \
            gnome-panel
        make PREFIX="$sw" all install
        if [ "$build" = "bspwm" ]; then
            cp examples/receptacles/extract_canvas \
               examples/receptacles/induce_rules   \
               "$sw/bin"
        fi
        ;;
    xdotool)
        ((force)) || { \
            [ "$(xdotool --version)" = "xdotool version 3.+20181227.1" ] && \
            exit;
        }
        exit_unless_x
        install_pkg libxinerama-dev x11proto-xinerama-dev libxkbcommon-dev
        git_co_build master
        make PREFIX="$sw" all test install
        pi "ldconfig fails"
        sudo ldconfig
        git_co_master
        ;;
    zsh)
        v=$(git tag | grep -v dev | grep -v test | tail -1)
        ((force)) || { \
            [ "$v" = "zsh-$(zsh --version | awk '{print $2}')" ] && exit;
        }
        oldhist=~/.zshhistory."$(date +'%Y%m%d')"
        cp ~/.zshhistory "$oldhist"
        install_pkg yodl
        git_co_build "$v"
        autoreconf -vfi
        configure --enable-pcre
        make -j "$j"
        make -j "$j" check || pi sometimes make check fails
        make -j "$j" install
        git_co_master
        cp "$oldhist" ~/.zshhistory
        # run this manually if necessry
        # compaudit | xargs -r chmod go-w
        ;;
    tmux)
        v=$(git tag | tail -1)
        ((force)) || { \
            [ "$v" = "$(tmux -V)" ] && exit;
        }
        git_co_build "$v"
        export LIBEVENT_CFLAGS="-I$sw/include"
        export LIBEVENT_LIBS="-L$sw/lib -Wl,-rpath=$sw/lib -levent"
        configure
        make check install
        git_co_master
        ;;
    zsh-git-prompt)
        v=0a6c8b6
        ((force)) || { \
            [ "$(git rev-parse --short HEAD)" = $v ] && exit;
        }
        git_co_build "$v"
        install_pkg haskell-stack
        stack setup
        stack build && stack install
        git_co_master
        ;;
    shellcheck)
        v=$(git tag | tail -1)
        iv="v$(shellcheck --version | head -2 | tail -1 | awk '{print $2}')"
        ((force)) || { [ "$v" = "$iv" ] && exit; }
        git_co_build "$v"
        # install_pkg cabal-install
        # cabal update && cabal install --jobs="$j" --prefix="$sw" && cabal clean
        sd="shellcheck-$v"
        wget "https://storage.googleapis.com/shellcheck/$sd.linux.x86_64.tar.xz"
        tar --xz -xvf "$sd.linux.x86_64.tar.xz"
        mv "$sd/shellcheck" "$sw/bin"
        git_co_master
        ;;
    skype)
        exit_unless_x
        sudo dpkg --add-architecture i386
        sudo add-apt-repository \
            "deb http://archive.canonical.com/ $(lsb_release -sc) partner"
        install_pkg skype
        ;;
    ClipIt)
        exit_unless_x
        install_pkg autopoint intltool libgtk2.0-dev
        ./autogen.sh
        configure
        make
        make install
        ;;
    PathPicker)
        target="$sw/bin/fpp"
        [ -e "$target" ] || ln -s "$(pwd)/fpp" "$target"
        ;;
    diff-so-fancy)
        bin="$sw/bin"
        cp -a third_party/build_fatpack/diff-so-fancy \
              third_party/ansi-reveal/ansi-reveal.pl  \
              "$bin"
        perl -pi -e 's/my \$ansi_color_regex = qr.*\K3/4/' "$bin/diff-so-fancy"
        ;;
    tig)
        v=$(git tag | tail -1)
        iv="tig-$(tig --version | head -1 | awk '{print $3}')"
        ((force)) || { [ "$v" = "$iv" ] && exit; }
        git_co_build "$v"
        configure
        make -j "$j" test || pi "make test expected to fail - don't know why"
        make -j "$j" install
        git_co_master
        ;;
    git)
        v=$(git tag | grep -v rc | grep '^v' | sort -V | tail -1)
        iv="v$(git --version | awk '{print $3}')"
        ((force)) || { [ "$v" = "$iv" ] && exit; }
        git_co_build "$v"
        install_pkg libcurl4-openssl-dev gettext
        make -j "$j" prefix="$sw" all install
        git_co_master
        ;;
    caps2esc)
        exit_if_vm
        exit_unless_x
        install_pkg libudev-dev libevdev-dev
        gcc -std=gnu99 caps2esc.c -o caps2esc \
            -I/usr/include/libevdev-1.0 -levdev -ludev
        cp caps2esc "$sw/bin"
        ;;
    rg)
        gh="https://github.com"
        tar=$(wget -O - -o /dev/null $gh/BurntSushi/ripgrep/releases | \
              grep x86_64-unknown-linux-musl.tar.gz | head -1 |        \
              perl -ne 'print $1 if /"(.*?)"/')
        url="$gh/$tar"
        wget -O /tmp/rg.tgz "$url"
        dir="/tmp/rg"
        (rm -rf $dir; mkdir -p $dir && cd $dir && tar xvzf /tmp/rg.tgz)
        ls -alR $dir
        mv $dir/*/rg "$sw/bin"
        mv $dir/*/doc/rg.1 "$sw/share/man/man1"
        ;;
    fd)
        gh="https://github.com"
        tar=$(wget -O - -o /dev/null $gh/sharkdp/fd/releases  | \
              grep x86_64-unknown-linux-musl.tar.gz | head -1 | \
              perl -ne 'print $1 if /"(.*?)"/')
        url="$gh/$tar"
        wget -O /tmp/fd.tgz "$url"
        dir="/tmp/fd"
        (rm -rf $dir; mkdir -p $dir && cd $dir && tar xvzf /tmp/fd.tgz)
        ls -alR $dir
        mv $dir/*/fd "$sw/bin"
        mv $dir/*/fd.1 "$sw/share/man/man1"
        mv $dir/*/autocomplete/_fd "$sw/share/zsh/site-functions"
        ;;
    fzf)
        v=$(git tag | sort -V | tail -1)
        [ "$v" = "$(fzf --version | awk '{print $1}')" ] && exit
        git checkout master
        git branch -D "$b" || true
        git checkout -b "$b" "$v"
        ./install --all --bin
        cp -a bin/* "$sw/bin"
        mkdir -p "$sw/etc/zsh"
        cp -a shell/*.zsh "$sw/etc/zsh"
        perl -pi -e 's/fzf-completion\(\) \{\K/\n  emulate -L zsh/' \
            "$sw/etc/zsh/completion.zsh"
        git checkout master
        ;;
    plenv)
        v=$(git tag | grep -v '^v' | sort -V | tail -1)
        [ "$v" = "$(plenv --version | awk '{print $2}')" ] && exit
        git checkout master
        git branch -D "$b" || true
        git checkout -b "$b" "$v"
        rm -f ~/.plenv
        ln -s "$(pwd)" ~/.plenv
        if [ -n "$PLENV_VERSIONS" ]; then
            rm -f ~/.plenv/versions
            mkdir -p "$PLENV_VERSIONS"
            ln -s "$PLENV_VERSIONS" ~/.plenv/versions
        fi
        git checkout master
        ;;
    Perl-Build)
        v=$(git tag | tail -1)
        git checkout master
        git branch -D "$b" || true
        git checkout -b "$b" "$v"
        mkdir -p ~/.plenv/plugins
        pb=~/.plenv/plugins/perl-build
        rm -f "$pb"
        ln -s "$(pwd)" "$pb"
        git checkout master
        ;;
    font)
        font=Inconsolata\ Nerd\ Font\ Complete\ Windows\ Compatible.otf
        fonts="$HOME/.fonts"
        curl -L 'https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Inconsolata/complete/Inconsolata%20Nerd%20Font%20Complete%20Windows%20Compatible.otf?raw=true' >| "$font"
        [ -e "$fonts" ] || mkdir "$fonts"
        [ -e "$fonts/$font" ] && exit
        cp "$font" "$fonts"
        fc-cache -vf "$fonts"
        ;;
    ruby)
        sudo apt-add-repository ppa:brightbox/ruby-ng
        install_pkg ruby2.4 ruby2.4-dev
        ;;
    openssl)
        v=$(git tag | grep OpenSSL_1 | grep -v - | tail -1)
        o=$(openssl version | perl -pe 's/(OpenSSL [^ ]*).*/$1/; s/[ .]/_/g')
        [ "$v" = "$o" ] && exit
        git checkout master
        git branch -D "$b" || true
        git checkout -b "$b" "$v"
        git checkout "$v"
        # git checkout OpenSSL_1_0_1u
        git distclean
        # shellcheck disable=SC2016
        ./config --prefix="$sw" --openssldir="$sw/ssl" \
                 -Wl,--enable-new-dtags,-rpath,'$(LIBRPATH)'
        make -j "$j"
        TOP="" make -j "$j" test
        make -j "$j" install
        git checkout master
        ;;
    cpython)
        v=$(git tag | grep -E '^v3\.[0-9]+\.[0-9]+$' | tail -1)
        [ "$v" = "v$(python3 --version | awk '{print $2}')" ] && exit
        git checkout master
        git branch -D "$b" || true
        git checkout -b "$b" "$v"
        git clean -dxf
        install_pkg build-essential git libexpat1-dev libssl-dev zlib1g-dev   \
            libncurses5-dev libbz2-dev liblzma-dev                            \
            libsqlite3-dev libffi-dev tcl-dev libgdbm-dev                     \
            libreadline-dev tk tk-dev                                         \
            libreadline-gplv2-dev libncursesw5-dev libc6-dev libbz2-dev
        configure --enable-optimizations --enable-shared LDFLAGS=-Wl,-rpath="$sw/lib"
        # make test  # this fails on pjcj.net
        make -j "$j" install
        git checkout master
        ;;
    harfbuzz)
        git checkout "$(git tag | grep -v '[a-z]' | tail -1)"
        git clean -dxf
        install_pkg                                               \
            gcc g++ libfreetype6-dev libglib2.0-dev libcairo2-dev \
            autoconf automake libtool pkg-config ragel gtk-doc-tools
        configure
        make check || true  # can fail
        make install
        ;;
    mosh)
        v=$(git tag | grep -v rc | sed 's/mosh-//' | tail -1)
        [ "$v" = "$(mosh --version | head -1 | awk '{print $2}')" ] && exit
        git checkout master
        git branch -D "$b" || true
        git checkout -b "$b" "mosh-$v"
        git clean -dxf
        install_pkg                                               \
            protobuf-compiler libprotobuf-dev
        configure
        make -j "$j" check || true  # can fail
        make -j "$j" install
        git checkout master
        ;;
    kitty)
        export PATH=/usr/bin:$PATH
        curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
        mkdir -p ~/.terminfo/x
        cp -a ~/.local/kitty.app/share/terminfo/x/xterm-kitty ~/.terminfo/x
        ;;
    kitty_from_source)
        git checkout "$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -1)"
        git clean -dxf
        # We have an old version of wayland_scanner
        perl -pi -e 's/(run_tool\(\[env.wayland_scanner, q, src, dest],)/os.system(env.wayland_scanner + " " + q + " < " + src + " > " + dest)\n
# $1/; s/(desc=.Generating)/# $1/' glfw/glfw.py
        sudo apt-add-repository ppa:wayland.admin/daily-builds < /dev/null
        sudo aptitude update
        install_pkg                                                           \
            linux-generic-lts-trusty xserver-xorg-core-lts-trusty             \
            xserver-xorg-lts-trusty xserver-xorg-video-all-lts-trusty         \
            xserver-xorg-input-all-lts-trusty libwayland-egl1-mesa-lts-trusty \
            libegl1-mesa-dev-lts-trusty
        install_pkg                                         \
            libglew-dev libxkbcommon-x11-dev libxcb-xkb-dev \
            libwayland-protocols-dev libwayland-egl1
        PKG_CONFIG_PATH="$sw/lib/pkgconfig:$(pkg-config --variable pc_path pkg-config)"
        export PKG_CONFIG_PATH
        make
        ;;
    irssi)
        v=$(git tag | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -1)
        [ "$v" = "$(irssi --version | awk '{print $2}')" ] && exit
        install_pkg libglib2.0-dev
        git checkout master
        git branch -D "$b" || true
        git checkout -b "$b" "$v"
        git clean -dxf
        configure
        make -j "$j" check install || true
        git checkout master
        ;;
    node)
        curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash
        sudo aptitude update
        sudo aptitude install nodejs
        mkdir -p "$NPM_PACKAGES"
        echo "prefix=$NPM_PACKAGES" > ~/.npmrc
        npm i -g ask-cli
        ;;
    bat)
        gh="https://github.com"
        deb=$(wget -O - -o /dev/null $gh/sharkdp/bat/releases | \
              grep _amd64.deb | head -1 |                       \
              perl -ne 'print $1 if /"(.*?)"/')
        url="$gh/$deb"
        wget -O /tmp/bat.deb "$url"
        sudo dpkg -i /tmp/bat.deb
        ;;
    *)
        pi unknown build "$build"
        exit
        ;;
esac

pi "built $build"
