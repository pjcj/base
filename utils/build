#!/bin/sh

# set -x

build=$1
if [ "$build" ]; then
    dir=$(ghq list -p | grep -w "$build$")
    if [ "$dir" ]; then
        cd "$dir" || exit 1
    fi
fi

set -e

echo build "${build:=$(basename "$(pwd)")}"

sw=$HOME/g/sw
mkdir -p "$sw/bin"
mkdir -p "$sw/man/man1"

configure() {
    [ -f ./configure ] || ./autogen.sh
    ./configure --prefix="$sw" "$@"
}

exit_unless_x() {
    if ! xset q > /dev/null 2>&1; then
        echo "not running under X, ignoring $build"
        exit
    fi
}

exit_if_vm() {
    if [ "$ISVM" ]; then
        echo "running as VM, ignoring $build"
        exit
    fi
}

install_pkg() {
    # sudo aptitude update
    sudo aptitude install "$@"
}

case "$build" in
    urlview)
        autoreconf -vfi
        configure
        make check install
        ;;
    htop)
        install_pkg libncursesw5-dev
        configure
        make check install
        ;;
    libevent)
        exit_unless_x
        configure
        make install
        ;;
    neovim)
        v=$(git tag | tail -1)
        [ "NVIM $v" = "$(nvim -v | head -1)" ] && exit
        git checkout "$v"
        if [ ! "$ISOSX" ]; then
            install_pkg \
                libtool libtool-bin autoconf automake cmake g++ pkg-config unzip
        fi
        git clean -dxf
        make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX:PATH=$sw" \
             CMAKE_BUILD_TYPE=Release test install
        ;;
    vim)
        if [ ! "$ISOSX" ]; then
            install_pkg \
                libncurses5-dev libgnome2-dev libgnomeui-dev \
                libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
                libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \
                python3-dev ruby-dev lua5.1 lua5.1-dev libperl-dev
        fi
        git clean -dxf
        configure                      \
            --with-features=huge       \
            --enable-multibyte         \
            --enable-rubyinterp=yes    \
            --enable-pythoninterp=yes  \
            --enable-python3interp=yes \
            --enable-perlinterp=yes    \
            --enable-luainterp=yes     \
            --enable-gui=gtk2          \
            --enable-cscope
        make VIMRUNTIMEDIR="$sw/share/vim/vim80" test install
            # --with-python-config-dir=/usr/lib/python2.7/config \
            # --with-python3-config-dir=/usr/lib/python3.5/config \
        ;;
    st)
        exit_unless_x
        install_pkg fontconfig libfontconfig1-dev \
            libfreetype6 libfreetype6-dev libxft-dev
        make clean install
        make_tmux_terminfo
        ;;
    sxhkd|bspwm)
        exit_unless_x
        install_pkg \
            libxcb-util0-dev libxcb-keysyms1-dev                     \
            libxcb-xinerama0-dev libxcb-randr0-dev libxcb-icccm4-dev \
            libxcb-ewmh1-dev xcb libxcb-util0-dev libxcb-ewmh-dev    \
            libxcb-randr0-dev libxcb-icccm4-dev libxcb-keysyms1-dev  \
            libxcb-xinerama0-dev libxcb-ewmh2                        \
            gnome-panel
        make PREFIX="$sw" all install
        if [ "$build" = "bspwm" ]; then
            cp examples/receptacles/extract_canvas \
               examples/receptacles/induce_rules \
               "$sw/bin"
        fi
        ;;
    xdotool)
        exit_unless_x
        install_pkg libxinerama-dev x11proto-xinerama-dev libxkbcommon-dev
        make PREFIX="$sw" all test install
        sudo ldconfig
        ;;
    zsh)
        v=$(git tag | grep -v dev | grep -v test | tail -1)
        [ "$v" = "zsh-$ZSH_VERSION" ] && exit
        oldhist=~/.zshhistory."$(date +'%Y%m%d')"
        cp ~/.zshhistory "$oldhist"
        git checkout "$v"
        autoreconf -vfi
        configure --enable-pcre
        make
        make check
        make install || echo make install expected to fail - docs not built
        cp "$oldhist" ~/.zshhistory
        compaudit | xargs chmod go-w
        ;;
    tmux)
        v=$(git tag | tail -1)
        [ "$v" = "$(tmux -V)" ] && exit
        git checkout "$v"
        export LIBEVENT_CFLAGS="-I$sw/include"
        export LIBEVENT_LIBS="-L$sw/lib -Wl,-rpath=$sw/lib -levent"
        configure
        make check install
        ;;
    zsh-git-prompt)
        stack setup
        stack build && stack install
        ;;
    shellcheck)
        install_pkg cabal-install
        cabal update && cabal install --prefix="$sw" && cabal clean
        ;;
    skype)
        exit_unless_x
        sudo dpkg --add-architecture i386
        sudo add-apt-repository \
            "deb http://archive.canonical.com/ $(lsb_release -sc) partner"
        install_pkg skype
        ;;
    ClipIt)
        exit_unless_x
        install_pkg autopoint intltool
        ./autogen.sh
        configure
        make
        make install
        ;;
    PathPicker)
        target="$sw/bin/fpp"
        [ -e "$target" ] || ln -s "$(pwd)/fpp" "$target"
        ;;
    diff-so-fancy)
        bin="$sw/bin"
        cp -a third_party/build_fatpack/diff-so-fancy \
              third_party/ansi-reveal/ansi-reveal.pl  \
              "$bin"
        perl -pi -e 's/my \$ansi_color_regex = qr.*\K3/4/' "$bin/diff-so-fancy"
        ;;
    tig)
        configure
        make test || echo "make test expected to fail - don't know why"
        make install
        ;;
    git)
        install_pkg libcurl4-openssl-dev gettext
        git checkout "$(git tag | grep -v rc | grep '^v' | sort -V | tail -1)"
        make prefix="$sw" all install
        ;;
    caps2esc)
        exit_if_vm
        exit_unless_x
        install_pkg libudev-dev libevdev-dev
        gcc -std=gnu99 caps2esc.c -o caps2esc \
            -I/usr/include/libevdev-1.0 -levdev -ludev
        cp caps2esc "$sw/bin"
        ;;
    rg)
        gh="https://github.com"
        tar=$(wget -O - -o /dev/null $gh/BurntSushi/ripgrep/releases | \
              grep x86_64-unknown-linux-musl.tar.gz | head -1 |        \
              perl -ne 'print $1 if /"(.*?)"/')
        url="$gh/$tar"
        wget -O /tmp/rg.tgz "$url"
        dir="/tmp/rg"
        (rm -rf $dir; mkdir -p $dir && cd $dir && tar xvzf /tmp/rg.tgz)
        ls -alR $dir
        mv $dir/*/rg "$sw/bin"
        mv $dir/*/rg.1 "$sw/share/man/man1"
        ;;
    fd)
        gh="https://github.com"
        tar=$(wget -O - -o /dev/null $gh/sharkdp/fd/releases  | \
              grep x86_64-unknown-linux-musl.tar.gz | head -1 | \
              perl -ne 'print $1 if /"(.*?)"/')
        url="$gh/$tar"
        wget -O /tmp/fd.tgz "$url"
        dir="/tmp/fd"
        (rm -rf $dir; mkdir -p $dir && cd $dir && tar xvzf /tmp/fd.tgz)
        ls -alR $dir
        mv $dir/*/fd "$sw/bin"
        mv $dir/*/fd.1 "$sw/share/man/man1"
        mv $dir/*/autocomplete/_fd "$sw/share/zsh/site-functions"
        ;;
    fzf)
        ./install --all --no-bash --no-zsh
        cp -a bin/* "$sw/bin"
        mkdir -p "$sw/etc/zsh"
        cp -a shell/*.zsh "$sw/etc/zsh"
        ;;
    plenv)
        rm -f ~/.plenv
        ln -s "$(pwd)" ~/.plenv
        if [ ! -z "$PLENV_VERSIONS" ]; then
            rm -f ~/.plenv/versions
            mkdir -p "$PLENV_VERSIONS"
            ln -s "$PLENV_VERSIONS" ~/.plenv/versions
        fi
        ;;
    Perl-Build)
        mkdir -p ~/.plenv/plugins
        pb=~/.plenv/plugins/perl-build
        rm -f "$pb"
        ln -s "$(pwd)" "$pb"
        ;;
    rxvt-unicode)
        # ignore for now
        ;;
    font)
        font=Inconsolata\ Nerd\ Font\ Complete\ Windows\ Compatible.otf
        fonts="$HOME/.fonts"
        curl -L 'https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Inconsolata/complete/Inconsolata%20Nerd%20Font%20Complete%20Windows%20Compatible.otf?raw=true' >| "$font"
        [ -e "$fonts" ] || mkdir "$fonts"
        [ -e "$fonts/$font" ] && exit
        cp "$font" "$fonts"
        fc-cache -vf "$fonts"
        ;;
    ruby)
        sudo apt-add-repository ppa:brightbox/ruby-ng
        install_pkg ruby2.4 ruby2.4-dev
        ;;
    openssl)
        v=$(git tag | grep OpenSSL_1 | tail -1)
        o=$(openssl version | perl -pe 's/(OpenSSL [^ ]*).*/$1/; s/[ .]/_/g')
        [ "$v" = "$o" ] && exit
        git checkout "$v"
        # shellcheck disable=SC2016
        ./config --prefix="$sw" --openssldir="$sw/ssl" \
                 -Wl,--enable-new-dtags,-rpath,'$(LIBRPATH)'
        TOP="" make test install
        ;;
    cpython)
        git checkout "$(git tag | grep -E '^v3\.[0-9]+\.[0-9]+$' | tail -1)"
        git clean -dxf
        install_pkg build-essential git libexpat1-dev libssl-dev zlib1g-dev   \
            libncurses5-dev libbz2-dev liblzma-dev                            \
            libsqlite3-dev libffi-dev tcl-dev libgdbm-dev                     \
            libreadline-dev tk tk-dev
        configure --enable-optimizations
        make test install
        ;;
    *)
        echo unknown build "$build"
        ;;
esac

echo "built $build"
