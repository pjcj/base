#!/usr/bin/env perl

use 5.18.2;
use warnings;
use utf8::all;

use Data::Printer deparse => 1;
use Encode;
use Getopt::Long;
use Path::Tiny;
use Unicode::Normalize qw( NFC NFD NFKC NFKD );

sub pd { say join " ", map ref() ? p $_ : $_ // "*undef*", @_ }

my $Defaults = {
    debug   => 0,
    path    => "",
    verbose => 0,
};

our $O = {};
sub get_options {
    my $o = { argv => [@ARGV] };
    die "Bad option" unless GetOptions($o, qw(
        conf=s
        debug!
        path=s
        verbose!
    ));
    $o->{args} = [@ARGV];

    our $CONF = {};
    if (my $file = $o->{conf}) {
        unless (my $ret = do $file) {
            warn "couldn't parse $file: $@" if $@;
            warn "couldn't do $file: $!"    unless defined $ret;
            warn "couldn't run $file"       unless $ret;
        }
    }
    %$O = (%$Defaults, %$CONF, %$o);
    $O->{begin}->() if $O->{begin};
    pd "Options: ", $O if $O->{verbose};
}

sub main {
    get_options;

    my ($file, $type) = @{$O->{args}};
    $type = defined $type ? ".$type" : ($file =~ /(\.\w*)$/)[0] // ".pl";
    pd file => $file, $type if $O->{verbose};
    my $dir = $ENV{TEMPLATE_DIR} || path("$0/../templates")->realpath;
    my $tfile = path("$dir/template$type");
    return 0 unless $tfile->exists;
    my $template = $tfile->slurp_utf8;
    my $vars = {
        FILE => $file,
        TYPE => $type,
        YEAR => 1900 + (localtime)[5],
        $type eq ".pm" ? do {
            my $module = $file =~ s/\.\w+$//r;
            my $mm = $module;
            for my $p (split ",", $O->{path}) {
                my $m = $mm =~ s/^\Q$p\///r;
                $module = $m if length $m < length $module;
            }
            $module =~ s|/|::|g;
            MODULE => $module
        } : (),
    };
    pd vars => $vars if $O->{verbose};
    for my $var (sort keys %$vars) {
        $template =~ s/%$var%/$vars->{$var}/g;
    }
    print $template;
    0
}

main

__END__

=head1 NAME

file_template - generate a new file from a template

=head1 SYNOPSIS

 file_template [filename] [type]

=head1 DESCRIPTION

Generates a new file from a template

=head1 OPTIONS

The following command line options are supported:

 -h -help              - show help
 -i -info              - show documentation
 -v -version           - show version

=head1 DETAILS

=head1 EXIT STATUS

The following exit values are returned:

0   All operations were completed successfully.

>0  An error occurred.

=head1 SEE ALSO

=head1 BUGS

=head1 LICENCE

Copyright 2016, Paul Johnson (paul@pjcj.net) http://www.pjcj.net

This software is free.  It is licensed under the same terms as Perl itself.

=cut
