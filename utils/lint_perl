#!/usr/bin/env perl

use 5.28.0;
use JSON;

sub main {
  my ($file, $root, $type) = @_;
  my $log = "/tmp/lint_perl.log";
  open my $l, ">>", "$log" or die "Can't open $log: $!";
  say $l "\n\n-- " . localtime . ": $0 - $ENV{PWD}";
  say $l "-- file [$file] root [$root] type [$type]";

  my @common = qw( -Ilib -It/lib );
  push @common, "-Mblib" if -d "blib";
  push @common, split " ", $ENV{LINT_PERL_OPTIONS} // "";

  my $perl = $ENV{LINT_PERL_COMMAND} // $^X;
  my $getinc = qq($perl @common -e 'print "\$_\\n" for \@INC');
  # say $l "-- getinc $getinc";
  my @inc = qx($getinc);
  chomp @inc;
  # say $l "-- inc [$_]" for @inc;

  my @o = qw( -X -c -Mwarnings );
  push @o, @common,
  push @o, "-Mblib" if -d "blib";
  push @o, split " ", $ENV{LINT_PERL_OPTIONS} // "";

  # say $l "-- type [$type]";
  my ($pm, $tmpfile);
  if ($type eq "pm") {
    $file =~ s/\Q$_\/// for $root, sort { length $b <=> length $a } @inc;
    # say $l "-- file $file";

    $pm = $file;
    $pm =~ s/\//::/g;
    $pm =~ s/^:://;
    $pm =~ s/\.pm$//;
    # say $l "-- pm $pm";

    my $tmpdir = "/tmp/lint_perl";
    $tmpfile = "$tmpdir/$file";
    my $dir = $tmpfile =~ s|/[^/]*$||r;
    # say $l "rm -rf $tmpdir && mkdir -p $dir";
    system "rm -rf $tmpdir && mkdir -p $dir";
    open my $fh, ">", $tmpfile or die "Can't open $tmpfile: $!";
    print $fh $_ for <STDIN>;
    close $fh or die "Can't close $tmpfile: $!";
    # say $l "-- wrote $tmpfile";

    unshift @o, "-I$tmpdir";
    push @o, "-M$pm -e0";
  }

  my $cmd = "$perl @o";
  say $l "-- running: $cmd";
  my $out = qx($cmd 2>&1);
  chomp $out;
  my $ret = $?;
  say $l "-- return value: $ret";
  say $l "$out";

  my $ignore = $ENV{LINT_PERL_IGNORE} // "";
  # say $l "-- ignoring [$ignore]";
  my $err = qr/(.*?) at (?:(?:\Q$tmpfile\E)|-) line (\d+)([^\n]*)/s;
  # my $err = qr/(.*) at - line (\d+)([^\n]*)/s;
  # say $l "-- Error regex [$err]";
  my @errs;
  while ($out =~ /$err/mgs) {
    my ($line, $msg) = ($2, ($1 // "") . ($3 // ""));
    $msg =~ s/\.$//;
    say $l "-- found: $line:$msg";
    $msg =~ s/$ignore//gsm if $ignore;
    next unless $msg;
    my $e = { row => $line, message => $msg };
    say $l "-- adding $line:$msg";
    push @errs, $e;
  }

  unlink $pm if $pm;

  my $err = encode_json \@errs;
  say $l "-- errors: ", $err;
  say $err;
  @errs ? 2 : 0
}

exit main @ARGV
