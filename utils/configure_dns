#!/usr/bin/env perl

use 5.18.2;
use warnings;
use utf8::all;

use Data::Printer deparse => 1;
use Encode;
use Getopt::Long;
use Path::Tiny;
use Unicode::Normalize qw( NFC NFD NFKC NFKD );

my $am1  = "213.138.100.164";
my $pjcj = "46.43.15.202";   # curl ipecho.net/plain

sub pd { say join " ", map ref() ? p $_ : $_ // "*undef*", @_ }

my $Defaults = {
    debug   => 0,
    verbose => 0,
    ttl     => 60,
};

our $O = {};
sub get_options {
    my $o = { argv => [@ARGV] };
    die "Bad option" unless GetOptions($o, qw(
        conf=s
        debug!
        verbose!
        home_ip=s
        ttl=s
    ));
    $o->{args} = [@ARGV];

    our $CONF = {};
    if (my $file = $o->{conf}) {
        unless (my $ret = do $file) {
            warn "couldn't parse $file: $@" if $@;
            warn "couldn't do $file: $!"    unless defined $ret;
            warn "couldn't run $file"       unless $ret;
        }
    }
    %$O = (%$Defaults, %$CONF, %$o);
    $O->{begin}->() if $O->{begin};
    $O->{home_ip} //= $pjcj;
    ($O->{home_domain}) = `nslookup $O->{home_ip}` =~ /name = (.*)\.$/m;
    pd "Options: ", $O if $O->{verbose};
}

sub write_files {
    my $ttl = $O->{ttl};

    my $domains = {
        "am1.amg1.cpancover.uk0.bigv.io"  => $pjcj,
        "ameasure.com"                    => $am1,
        "gedcom.co.uk"                    => $am1,
        "jenintheden.com"                 => $pjcj,
        "jennijohnson.com"                => $pjcj,
        "johnsons.ch"                     => $pjcj,
        "pjcj.amg1.cpancover.uk0.bigv.io" => $pjcj,
        "pjcj.com"                        => $pjcj,
        "pjcj.co.uk"                      => $pjcj,
        "pjcj.net"                        => $pjcj,
        "wes-johnson.com"                 => $pjcj,
    };

    my $data = "/tmp/data.tmp";
    my $p = path($data);
    $p->remove_tree;
    $p->mkpath;

    for my $d (sort keys %$domains) {
        my $ip = $domains->{$d};
        my $mx = "";
        $mx = <<EOMX unless $d =~/bigv/;
# mxguarddog
\@${d}::97a68220.21.ik2.com:5:$ttl
\@${d}::97a68220.22.ik2.io:7:$ttl
\@${d}::97a68220.23.ik2.eu:9:$ttl

# SPF records
'$d:v=spf1 +a +mx a\\072$O->{home_domain} \\176all:$ttl

EOMX
        $mx = <<EOMX if $d =~/johnsons/;
\@${d}::johnsons-ch.mail.protection.outlook.com:0:$ttl
Cautodiscover.johnsons.ch:autodiscover.outlook.com:$ttl
'$d:v=spf1\\040include\\072spf.protection.outlook.com\\040-all:$ttl

EOMX

        my $caa = "";
        $caa = <<EOCAA if $d =~/pjcj/;
# swisssign
:$d:257:\\000\\005\\151\\163\\163\\165\\145\\163\\167\\151\\163\\163\\163\\151\\147\\156\\056\\143\\157\\155
# :$d:257:\\128\\005issueletsencrypt.org:86400

# domain owner check
'$d:swisssign-check=I7PstNARKI4SesG1RvHLSEkXkZ0rniPVj0MhYePjoH:86400
'$d:swisssign-check=tDdwGDBVqvzkh9DvtjoRDX0ykz2crpXNWk6dB5SaWc:10

EOCAA

        my $extra = "";
        $extra .= "'$d:google-site-verification=o8e9MztTFiu8I2vz_M-Ln0QBxiPGQVKPaxvEHQB6OnE" if $d eq "pjcj.net";

        path("$data/$d.txt")->append(<<EOT);
# Nameserver records
.${d}::a.ns.bytemark.co.uk:$ttl
.${d}::b.ns.bytemark.co.uk:$ttl
.${d}::c.ns.bytemark.co.uk:$ttl

# The domain name itself
=$d:$ip:$ttl

# Useful aliases
+www.$d:$ip:$ttl
+mail.$d:$ip:$ttl

# A record for MX
+mx.$d:$ip:$ttl

#  The domain name itself -- AAAA record and reverse.
# 6$d:200141c9000104240000000000000202:$ttl

#  Useful aliases -- AAAA records only
# 3www.$d:200141c9000104240000000000000202:$ttl
# 3mail.$d:200141c9000104240000000000000202:$ttl

# AAAA record for MX
# 3mx.$d:200141c9000104240000000000000202:$ttl

# MX record -- no IP defined, as this is done separately above.
# \@${d}::mx.$d:15:$ttl

$mx
# h
+h.$d:$O->{home_ip}:$ttl

# skill
+skill.$d:$O->{home_ip}:$ttl

# CAA
# letsencrypt
:$d:257:\\000\\005\\151\\163\\163\\165\\145\\154\\145\\164\\163\\145\\156\\143\\162\\171\\160\\164\\056\\157\\162\\147
$caa

# Extra
$extra
EOT

        system "sudo cp $data/$d.txt /srv/$d/config/dns";
    }

    # system "cat $data/pjcj.net.txt";
    system "cat $data/johnsons.ch.txt";
    system "sudo $ENV{HOME}/g/base/utils/upload_dns"
}

sub main {
    get_options;
    write_files;
    0
}

main

__END__

=head1 NAME

utils/configure_dns - configure and upload Bytemark DNS

=head1 SYNOPSIS

 utils/configure_dns

=head1 DESCRIPTION

Configure and upload Bytemark DNS.

=head1 OPTIONS

The following command line options are supported:

 -h -help              - show help
 -i -info              - show documentation
 -v -version           - show version

 -home_ip              - specify the home ipaddress

=head1 DETAILS

=head1 EXIT STATUS

The following exit values are returned:

0   All operations were completed successfully.

>0  An error occurred.

=head1 SEE ALSO

=head1 LICENCE

Copyright 2020, Paul Johnson (paul@pjcj.net)

=cut
