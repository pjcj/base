# plugins
set-option -g @tpm_plugins "   \
  tmux-plugins/tpm             \
  tmux-plugins/tmux-logging    \
  tmux-plugins/tmux-resurrect  \
  tmux-plugins/tmux-sensible   \
  tmux-plugins/tmux-sessionist \
  erikw/tmux-powerline         \
  tmux-plugins/tmux-continuum  \
  sainnhe/tmux-fzf             \
"
# continuum must come after powerline

# other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

set-option -g @plugin "thewtex/tmux-mem-cpu-load"

# tmux-resurrect
set-option -g @resurrect-default-processes "man less tail htop irssi mutt"
set-option -g @resurrect-processes "ssh"
set-option -g @continuum-restore   "on"

# initialise TMUX plugin manager
run-shell ~/.tmux/plugins/tpm/tpm

# basic config
if-shell "[ $(uname) = Linux   ]" "set-option -g default-terminal 'tmux-256color'" ""
if-shell "[ $(uname) = Darwin  ]" "set-option -g default-terminal 'tmux-256color'" ""
if-shell "[ $(uname) = FreeBSD ]" "set-option -g default-terminal 'screen-256color'" ""
if-shell "[ $(uname) = FreeBSD ]" "set-option -g default-shell /usr/local/bin/zsh" ""
set-window-option -g xterm-keys

set-option -s escape-time 50

set-environment -g "SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
set-environment -g "TMUX_FZF_OPTIONS" "-p -w 75% -h 75%"
TMUX_FZF_LAUNCH_KEY="q"

# remap prefix to Control + a
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

unbind-key a
bind-key a send-prefix

# activity
set-window-option -g monitor-activity off
set-option -g visual-activity off

# reload config file
unbind-key R
bind-key R source-file ~/.tmux.conf \; display-message "reloading..."

# edit config file
unbind-key C-e
bind-key C-e split-window -bl "80%" "nvim ~/.tmux.conf"

# automatically set window title
set-window-option -g allow-rename off
set-window-option -g automatic-rename off

# vi mode
set-window-option -g mode-keys vi

# title
set-option -g set-titles on

# history
set-option -g history-limit 100000

# bell
set-option -g bell-action none

# sort sessions alphabetically in tree
bind-key s choose-tree -s -O name

# don't constrain to size of smallest client
set-window-option -g aggressive-resize on

# allow passing values directly to the terminal - used for wezterm integration
set-option -g allow-passthrough on

# borders
set-option -g focus-events on
set-option -g pane-border-lines double
set-option -g pane-border-indicators both
set-option -g pane-border-style fg=brightgreen
set-option -g pane-active-border-style fg=#fff179

# pane titles
set-option -g pane-border-status top
set-option -g pane-border-format "#{?pane_active,#[reverse],} #{pane_index} #{pane_current_command}#{?pane_title, #{pane_title},} #{pane_tty} "

# terminal features
set-option -ga terminal-overrides ',*256col*:Tc'  # true colour and italics
set-option -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q' # cursor shape
set-option -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set-option -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours

# mouse
set-option -g mouse on
bind-key y run "~/utils/tmux/mouse-toggle"
# add mouse status
# set-option -g status-right '#[fg=white]#(tmux show-options -g | grep mouse-resize-pane | cut -d" " -f2)#[default] %d-%b-%y %H:%M'

# navigation
bind-key -n DC       previous-window
bind-key -n End      next-window
bind-key -n 'IC'     send-keys C-a C-p
bind-key -n Home     send-keys C-a C-n
bind-key    C-q      last-window
bind-key    C-y      switch-client -l
bind-key -n M-Left   previous-window
bind-key -n M-Right  next-window

# pane selection
unbind-key l
bind-key -r -T prefix k select-pane -U
bind-key -r -T prefix j select-pane -D
bind-key -r -T prefix h select-pane -L
bind-key -r -T prefix l select-pane -R

# Smart pane switching with awareness of Vim splits
# See: https://github.com/mrjones2014/smart-splits.nvim
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

# Bind keys for smart navigation
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# copying selection vim style
bind-key Enter copy-mode                                                   # enter copy mode; default [
bind-key p     paste-buffer                                                # paste; default ]
bind-key P     choose-buffer                                               # choose which buffer to paste from
bind-key -T copy-mode-vi Escape send-keys -X clear-selection               # clear selection
bind-key -T copy-mode-vi v      send-keys -X begin-selection               # begin visual mode
bind-key -T copy-mode-vi V      send-keys -X select-line                   # visual line
bind-key -T copy-mode-vi y      send-keys -X copy-selection                # yank to tmux clipboard
bind-key -T copy-mode-vi Y      send-keys -X copy-pipe-and-cancel "pbcopy" # yank and send to sys clipboard
bind-key -T copy-mode-vi r      send-keys -X rectangle-toggle              # visual block toggle

# read and write paste buffer
bind-key < command-prompt -p "copy to tmux (hit enter to confirm):" "run-shell 'tmux set-buffer -- \"$(pbpaste)\"'"
bind-key > command-prompt -p "copy to system clipboard (hit enter to confirm):" "run-shell 'tmux show-buffer | pbcopy'"

# show all keys in help
unbind-key ?
bind-key ? list-keys -Na

unbind-key g  # don't need this sessionist keybinding

# send scrollback to editor
bind-key v "capture-pane" \; \
  capture-pane -S - \; \
  save-buffer /tmp/tmux.txt \; \
  delete-buffer \; \
  send-keys Escape 'ddiv +"/\\%u2500\\%u2500*$" +":normal! GN" /tmp/tmux.txt' Enter

# open claude in right pane (35% width)
bind-key A run-shell "~/utils/tmux/claude-show.sh"

# hide claude pane (break to separate window)
bind-key B run-shell "~/utils/tmux/claude-hide.sh"

# Show claude usage in popup
bind-key C-u display-popup -d "#{pane_current_path}" -xC -yC -w 120 -h 26 -E \
  "tmux new-session -A -s ccusage 'ccusage blocks --live'"
