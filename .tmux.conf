# plugins
set -g @tpm_plugins "                 \
  tmux-plugins/tpm                    \
  tmux-plugins/tmux-continuum         \
  tmux-plugins/tmux-logging           \
  tmux-plugins/tmux-resurrect         \
  tmux-plugins/tmux-sensible          \
  tmux-plugins/tmux-sessionist        \
  tmux-plugins/tmux-urlview           \
  tmux-plugins/vim-tmux-focus-events  \
  seebi/tmux-colors-solarized         \
  jbnicolai/tmux-fpp                  \
"
# other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# tmux-colors-solarized is probably not needed because of using tmux theme in
# powerline.

# tmux-resurrect
set -g @resurrect-processes    "ssh"
set -g @resurrect-strategy-vim "session"
set -g @continuum-restore      "on"

# initialise TMUX plugin manager
run-shell ~/.tmux/plugins/tpm/tpm

if-shell "[ $(uname) = Linux ]" "set-option -g default-terminal 'tmux-256color'" ""
if-shell "[ $(uname) = FreeBSD ]" "set-option -g default-terminal 'screen-256color'" ""
if-shell "[ $(uname) = FreeBSD ]" "set-option -g default-shell /usr/local/bin/zsh" ""
set-window-option -g xterm-keys

# remap prefix to Control + a
set-option -g prefix C-a
unbind C-b
bind C-a send-prefix

unbind a
bind-key a send-prefix

set -s escape-time 0

set-environment -g "SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock

# activity
set-window-option -g monitor-activity off
set-option -g visual-activity off

# reload config file
unbind R
bind R source-file ~/.tmux.conf \; display-message "reloading..."

# automatically set window title
set-window-option -g allow-rename off
set-window-option -g automatic-rename off

# vi mode
set-window-option -g mode-keys vi

# title
set-option -g set-titles on

# history
set -g history-limit 1000000

# bell
set -g bell-action none

# don't constrain to size of smallest client
set-window-option -g aggressive-resize on

# powerline
run-shell "powerline-daemon -q"
run-shell "tmux source-file $(echo `$PYTHON3 -c 'import powerline; print (powerline.__file__)'` | perl -pe 's|__init__.pyc?|bindings/tmux/powerline.conf|')"
set-option -g status-right-length 80
set-option -g status-interval     15

set -g focus-events on

set-option -ga terminal-overrides ",*256col*:Tc"               # true colour
set-option -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q' # cursor shape

# mouse stuff
set -g mouse off
# set-window-option -g mode-mouse          off
# set-window-option -g mouse-select-window off
# set-window-option -g mouse-select-pane   off
# set-window-option -g mouse-resize-pane   off
# bind a run "~/utils/tmux/mouse-toggle"
# add mouse status
# set-option -g status-right '#[fg=white]#(tmux show-options -g | grep mouse-resize-pane | cut -d" " -f2)#[default] %d-%b-%y %H:%M'

# for putty
# set-option -g terminal-overrides "rxvt-unicode:kend=\033[8~"
# Ow
# set-option -g terminal-overrides "rxvt-unicode:kdc=\033[3~"
bind-key -n DC   previous-window
bind-key -n End  next-window
bind-key -n IC   send-keys C-a C-p
bind-key -n Home send-keys C-a C-n

# pane selection
unbind l
bind-key -r -T prefix k select-pane -U
bind-key -r -T prefix j select-pane -D
bind-key -r -T prefix h select-pane -L
bind-key -r -T prefix l select-pane -R

# copying selection vim style
bind-key Enter copy-mode                                                   # enter copy mode; default [
bind-key p paste-buffer                                                    # paste; default ]
bind-key P choose-buffer                                                   # choose which buffer to paste from
bind-key -T copy-mode-vi Escape send-keys -X clear-selection               # clear selection
bind-key -T copy-mode-vi v      send-keys -X begin-selection               # begin visual mode
bind-key -T copy-mode-vi V      send-keys -X select-line                   # visual line
bind-key -T copy-mode-vi y      send-keys -X copy-selection                # yank to tmux clipboard
bind-key -T copy-mode-vi Y      send-keys -X copy-pipe-and-cancel "clipit" # yank and send to sys clipboard
bind-key -T copy-mode-vi r      send-keys -X rectangle-toggle              # visual block toggle

# read and write paste buffer
bind-key < command-prompt -p "copy to tmux (hit enter to confirm):" "run-shell 'tmux set-buffer -- \"$(clipit -c)\"'"
bind-key > command-prompt -p "copy to xsel (hit enter to confirm):" "run-shell 'tmux show-buffer | clipit'"
